"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _graphql = require("graphql");

var _error = require("graphql/error");

var _language = require("graphql/language");

var _default = new _graphql.GraphQLScalarType({
  name: 'DateTime',
  description: 'Use JavaScript Date object for date/time fields.',
  serialize: function serialize(value) {
    var v = value;

    if (!(v instanceof Date) && typeof v !== 'string' && typeof v !== 'number') {
      throw new TypeError("Value is not an instance of Date, Date string or number: ".concat(v));
    }

    if (typeof v === 'string') {
      v = new Date();
      v.setTime(Date.parse(value));
    } else if (typeof v === 'number') {
      v = new Date(v);
    } // eslint-disable-next-line no-restricted-globals


    if (Number.isNaN(v.getTime())) {
      throw new TypeError("Value is not a valid Date: ".concat(v));
    }

    return v.toJSON();
  },
  parseValue: function parseValue(value) {
    var date = new Date(value); // eslint-disable-next-line no-restricted-globals

    if (Number.isNaN(date.getTime())) {
      throw new TypeError("Value is not a valid Date: ".concat(value));
    }

    return date;
  },
  parseLiteral: function parseLiteral(ast) {
    if (ast.kind !== _language.Kind.STRING && ast.kind !== _language.Kind.INT) {
      throw new _error.GraphQLError("Can only parse strings & integers to dates but got a: ".concat(ast.kind));
    }

    var result = new Date(ast.kind === _language.Kind.INT ? Number(ast.value) : ast.value); // eslint-disable-next-line no-restricted-globals

    if (Number.isNaN(result.getTime())) {
      throw new _error.GraphQLError("Value is not a valid Date: ".concat(ast.value));
    }

    if (ast.kind === _language.Kind.STRING && ast.value !== result.toJSON()) {
      throw new _error.GraphQLError("Value is not a valid Date format (YYYY-MM-DDTHH:MM:SS.SSSZ): ".concat(ast.value));
    }

    return result;
  }
});

exports.default = _default;