"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _graphql = require("graphql");

var _error = require("graphql/error");

var _language = require("graphql/language");

function RegularExpression(name, regex) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var REGEX = new RegExp(regex);
  var errorMessage = options.errorMessage ? options.errorMessage : function (r, v) {
    return "Value does not match the regular expression ".concat(r, ": ").concat(v);
  };
  return new _graphql.GraphQLScalarType({
    name: name,
    description: "A field whose value matches the provided regular expression ".concat(regex, "."),
    serialize: function serialize(value) {
      if (typeof value !== 'string') {
        throw new TypeError("Value is not string: ".concat(value));
      }

      if (!REGEX.test(value)) {
        throw new TypeError(errorMessage(regex, value));
      }

      return value;
    },
    parseValue: function parseValue(value) {
      if (typeof value !== 'string') {
        throw new TypeError("Value is not string: ".concat(value));
      }

      if (!REGEX.test(value)) {
        throw new TypeError(errorMessage(regex, value));
      }

      return value;
    },
    parseLiteral: function parseLiteral(ast) {
      if (ast.kind !== _language.Kind.STRING) {
        throw new _error.GraphQLError("Can only validate strings as regular expressions but got a: ".concat(ast.kind));
      }

      if (!REGEX.test(ast.value)) {
        throw new TypeError(errorMessage(regex, ast.value));
      }

      return ast.value;
    }
  });
}

var _default = RegularExpression;
exports.default = _default;