#!/usr/bin/env node
/* eslint-disable strict */

"use strict";

const util = require("util");
const path = require("path");
const yargs = require("yargs");
const ConnectionParameters = require("pg/lib/connection-parameters");
const migrationRunner = require("../index");

const { Migration } = migrationRunner;

process.on("uncaughtException", err => {
  console.log(err.stack);
  process.exit(1);
});

try {
  require("dotenv").config({ silent: true }); // eslint-disable-line global-require,import/no-extraneous-dependencies
} catch (err) {
  if (err.code !== "MODULE_NOT_FOUND") {
    throw err;
  }
}

const schemaArg = "schema";
const createSchemaArg = "create-schema";
const databaseUrlVarArg = "database-url-var";
const migrationsDirArg = "migrations-dir";
const migrationsTableArg = "migrations-table";
const migrationsSchemaArg = "migrations-schema";
const createMigrationsSchemaArg = "create-migrations-schema";
const migrationFileLanguageArg = "migration-file-language";
const checkOrderArg = "check-order";
const configValueArg = "config-value";
const configFileArg = "config-file";
const ignorePatternArg = "ignore-pattern";
const singleTransactionArg = "single-transaction";
const lockArg = "lock";
const timestampArg = "timestamp";
const dryRunArg = "dry-run";
const fakeArg = "fake";

const { argv } = yargs
  .usage("Usage: $0 [up|down|create|redo] [migrationName] [options]")

  .option("d", {
    alias: databaseUrlVarArg,
    default: "DATABASE_URL",
    describe: "Name of env variable where is set the databaseUrl",
    type: "string"
  })

  .option("m", {
    alias: migrationsDirArg,
    default: `${process.cwd()}/migrations`,
    defaultDescription: "migrations",
    describe: "The directory containing your migration files",
    type: "string"
  })

  .option("t", {
    alias: migrationsTableArg,
    default: "pgmigrations",
    describe: "The table storing which migrations have been run",
    type: "string"
  })

  .option("s", {
    alias: schemaArg,
    default: "public",
    describe:
      "The schema on which migration will be run (defaults to `public`)",
    type: "string"
  })

  .option(createSchemaArg, {
    default: false,
    describe: "Creates the configured schema if it doesn't exist",
    type: "boolean"
  })

  .option(migrationsSchemaArg, {
    default: undefined,
    defaultDescription: 'Same as "schema"',
    describe: "The schema storing table which migrations have been run",
    type: "string"
  })

  .option(createMigrationsSchemaArg, {
    default: false,
    describe: "Creates the configured migration schema if it doesn't exist",
    type: "boolean"
  })

  .option(dryRunArg, {
    default: false,
    describe: "Prints the SQL but doesn't run it",
    type: "boolean"
  })

  .option(checkOrderArg, {
    default: true,
    describe: "Check order of migrations before running them",
    type: "boolean"
  })

  .option(ignorePatternArg, {
    default: "\\..*",
    describe: "Regex pattern for file names to ignore",
    type: "string"
  })

  .option(fakeArg, {
    default: false,
    describe: "Marks migrations as run",
    type: "boolean"
  })

  .option("i", {
    alias: "version",
    default: false,
    describe: "Print version info",
    type: "boolean"
  })

  .option(configValueArg, {
    default: "db",
    describe: "Name of config section with db options",
    type: "string"
  })

  .option("f", {
    alias: configFileArg,
    default: undefined,
    describe: "Name of config file with db options",
    type: "string"
  })

  .option("j", {
    alias: migrationFileLanguageArg,
    defaultDescription: "last one used or js if there is no migration yet",
    choices: ["js", "ts", "sql"],
    describe:
      "Language of the migration file (Only valid with the create action)",
    type: "string"
  })

  .option(singleTransactionArg, {
    default: true,
    describe:
      "Combines all pending migrations into a single database transaction so that if any migration fails, all will be rolled back",
    type: "boolean"
  })

  .option(lockArg, {
    default: true,
    describe: "When false, disables locking mechanism and checks",
    type: "boolean"
  })

  .option(timestampArg, {
    default: false,
    describe: "Treats number argument to up/down migration as timestamp",
    type: "boolean"
  })

  .help();

if (argv.version) {
  console.log(module.exports.version);
  process.exit(0);
}

if (argv.help || argv._.length === 0) {
  yargs.showHelp();
  process.exit(1);
}

let MIGRATIONS_DIR = argv[migrationsDirArg];
let DB_CONNECTION = process.env[argv[databaseUrlVarArg]];
let IGNORE_PATTERN = argv[ignorePatternArg];
let SCHEMA = argv[schemaArg];
let CREATE_SCHEMA = argv[createSchemaArg];
let MIGRATIONS_SCHEMA = argv[migrationsSchemaArg];
let CREATE_MIGRATIONS_SCHEMA = argv[createMigrationsSchemaArg];
let MIGRATIONS_TABLE = argv[migrationsTableArg];
let MIGRATIONS_FILE_LANGUAGE = argv[migrationFileLanguageArg];
let CHECK_ORDER = argv[checkOrderArg];

function readJson(json) {
  if (typeof json === "object") {
    SCHEMA = json[schemaArg] || SCHEMA;
    CREATE_SCHEMA = json[createSchemaArg] || CREATE_SCHEMA;
    MIGRATIONS_DIR = json[migrationsDirArg] || MIGRATIONS_DIR;
    MIGRATIONS_SCHEMA = json[migrationsSchemaArg] || MIGRATIONS_SCHEMA;
    CREATE_MIGRATIONS_SCHEMA =
      json[createMigrationsSchemaArg] || CREATE_MIGRATIONS_SCHEMA;
    MIGRATIONS_TABLE = json[migrationsTableArg] || MIGRATIONS_TABLE;
    MIGRATIONS_FILE_LANGUAGE =
      json[migrationFileLanguageArg] || MIGRATIONS_FILE_LANGUAGE;
    CHECK_ORDER =
      typeof json[checkOrderArg] !== "undefined"
        ? json[checkOrderArg]
        : CHECK_ORDER;
    IGNORE_PATTERN = json[ignorePatternArg] || IGNORE_PATTERN;
    if (json.url) {
      DB_CONNECTION = json.url;
    } else if (json.host || json.port || json.name || json.database) {
      DB_CONNECTION = {
        user: json.user,
        host: json.host || "localhost",
        database: json.name || json.database,
        password: json.password,
        port: json.port || 5432
      };
    }
  } else {
    DB_CONNECTION = json || DB_CONNECTION;
  }
}

try {
  // Load config (and suppress the no-config-warning)
  const oldSuppressWarning = process.env.SUPPRESS_NO_CONFIG_WARNING;
  process.env.SUPPRESS_NO_CONFIG_WARNING = 1;
  const config = require("config"); // eslint-disable-line global-require,import/no-extraneous-dependencies
  if (config.has(argv[configValueArg])) {
    const db = config.get(argv[configValueArg]);
    readJson(db);
  }
  process.env.SUPPRESS_NO_CONFIG_WARNING = oldSuppressWarning;
} catch (err) {
  if (err.code !== "MODULE_NOT_FOUND") {
    throw err;
  }
}

const configFileName = argv[configFileArg];
if (configFileName) {
  // eslint-disable-next-line global-require,import/no-dynamic-require,security/detect-non-literal-require
  const config = require(path.resolve(configFileName));
  readJson(config);
}

const action = argv._.shift();

if (action === "create") {
  // replaces spaces with dashes - should help fix some errors
  let newMigrationName = argv._.length ? argv._.join("-") : "";
  // forces use of dashes in names - keep thing clean
  newMigrationName = newMigrationName.replace(/[_ ]+/g, "-");

  if (!newMigrationName) {
    console.log("'migrationName' is required.");
    yargs.showHelp();
    process.exit(1);
  }

  Migration.create(
    newMigrationName,
    MIGRATIONS_DIR,
    MIGRATIONS_FILE_LANGUAGE,
    IGNORE_PATTERN
  )
    .then(migration => {
      console.log(util.format("Created migration -- %s", migration.path));
      process.exit(0);
    })
    .catch(err => {
      console.log(err.stack);
      process.exit(1);
    });
} else if (action === "up" || action === "down" || action === "redo") {
  if (!DB_CONNECTION) {
    const cp = new ConnectionParameters();
    if (!cp.host && !cp.port && !cp.database) {
      console.error(
        `The $${argv[databaseUrlVarArg]} environment variable is not set.`
      );
      process.exit(1);
    }
    DB_CONNECTION = cp;
  }

  const dryRun = argv[dryRunArg];
  if (dryRun) {
    console.log("dry run");
  }

  const singleTransaction = argv[singleTransactionArg];
  const fake = argv[fakeArg];
  const TIMESTAMP = argv[timestampArg];

  const noLock = !argv[lockArg];
  if (noLock) {
    console.log("no lock");
  }

  const updownArg = argv._.length ? argv._[0] : null;
  let numMigrations;
  let migrationName;

  if (updownArg !== null) {
    // eslint-disable-next-line eqeqeq
    if (parseInt(updownArg, 10) == updownArg) {
      numMigrations = parseInt(updownArg, 10);
    } else {
      migrationName = argv._.join("-").replace(/_ /g, "-");
    }
  }

  const options = (direction, _count, _timestamp) => {
    const count = _count === undefined ? numMigrations : _count;
    const timestamp = _timestamp === undefined ? TIMESTAMP : _timestamp;
    return {
      dryRun,
      databaseUrl: DB_CONNECTION,
      dir: MIGRATIONS_DIR,
      ignorePattern: IGNORE_PATTERN,
      schema: SCHEMA,
      migrationsSchema: MIGRATIONS_SCHEMA,
      migrationsTable: MIGRATIONS_TABLE,
      count,
      timestamp,
      file: migrationName,
      checkOrder: CHECK_ORDER,
      createSchema: CREATE_SCHEMA,
      createMigrationsSchema: CREATE_MIGRATIONS_SCHEMA,
      direction,
      singleTransaction,
      noLock,
      fake
    };
  };
  const promise =
    action === "redo"
      ? migrationRunner(options("down")).then(() =>
          migrationRunner(options("up", Infinity, false))
        )
      : migrationRunner(options(action));
  promise
    .then(() => {
      console.log("Migrations complete!");
      process.exit(0);
    })
    .catch(err => {
      console.log(err.stack);
      process.exit(1);
    });
} else {
  console.log("Invalid Action: Must be [up|down|create|redo].");
  yargs.showHelp();
  process.exit(1);
}

if (argv["force-exit"]) {
  console.log("Forcing exit");
  process.exit(0);
}
