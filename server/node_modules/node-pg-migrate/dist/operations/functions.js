"use strict";

const _require = require("../utils"),
      template = _require.template,
      escapeValue = _require.escapeValue,
      formatParams = _require.formatParams;

function dropFunction(typeShorthands) {
  return (functionName, functionParams = [], {
    ifExists,
    cascade
  } = {}) => {
    const ifExistsStr = ifExists ? " IF EXISTS" : "";
    const cascadeStr = cascade ? " CASCADE" : "";
    const paramsStr = formatParams(functionParams, typeShorthands);
    return template`DROP FUNCTION${ifExistsStr} "${functionName}"${paramsStr}${cascadeStr};`;
  };
}

function createFunction(typeShorthands) {
  const _create = (functionName, functionParams = [], functionOptions = {}, definition) => {
    const replace = functionOptions.replace,
          _functionOptions$retu = functionOptions.returns,
          returns = _functionOptions$retu === void 0 ? "void" : _functionOptions$retu,
          language = functionOptions.language,
          window = functionOptions.window,
          _functionOptions$beha = functionOptions.behavior,
          behavior = _functionOptions$beha === void 0 ? "VOLATILE" : _functionOptions$beha,
          onNull = functionOptions.onNull,
          parallel = functionOptions.parallel;
    const options = [];

    if (behavior) {
      options.push(behavior);
    }

    if (language) {
      options.push(`LANGUAGE ${language}`);
    } else {
      throw new Error(`Language for function ${functionName} have to be specified`);
    }

    if (window) {
      options.push("WINDOW");
    }

    if (onNull) {
      options.push("RETURNS NULL ON NULL INPUT");
    }

    if (parallel) {
      options.push(`PARALLEL ${parallel}`);
    }

    const replaceStr = replace ? " OR REPLACE" : "";
    const paramsStr = formatParams(functionParams, typeShorthands);
    return template`CREATE${replaceStr} FUNCTION "${functionName}"${paramsStr}
  RETURNS ${returns}
  AS ${escapeValue(definition)}
  ${options.join("\n  ")};`;
  };

  _create.reverse = dropFunction(typeShorthands);
  return _create;
}

function renameFunction(typeShorthands) {
  const _rename = (oldFunctionName, functionParams = [], newFunctionName) => {
    const paramsStr = formatParams(functionParams, typeShorthands);
    return template`ALTER FUNCTION "${oldFunctionName}"${paramsStr} RENAME TO "${newFunctionName}";`;
  };

  _rename.reverse = (oldFunctionName, functionParams, newFunctionName) => _rename(newFunctionName, functionParams, oldFunctionName);

  return _rename;
}

module.exports = {
  createFunction,
  dropFunction,
  renameFunction
};